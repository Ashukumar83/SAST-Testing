"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const SOOSHooksApiClient_1 = tslib_1.__importDefault(require("../../api/SOOSHooksApiClient"));
const constants_1 = require("../../constants");
const enums_1 = require("../../enums");
const logging_1 = require("../../logging");
const fs_1 = tslib_1.__importDefault(require("fs"));
const Path = tslib_1.__importStar(require("path"));
const utilities_1 = require("./utilities");
const GitHubContributorAuditProvider_1 = tslib_1.__importDefault(require("./providers/GitHub/GitHubContributorAuditProvider"));
const BitbucketCloudContributorAuditProvider_1 = tslib_1.__importDefault(require("./providers/BitbucketCloud/BitbucketCloudContributorAuditProvider"));
class ContributorAuditService {
    constructor(auditProvider, hooksApiClient) {
        this.auditProvider = auditProvider;
        this.hooksApiClient = hooksApiClient;
    }
    static create(apiKey, apiURL, scmType) {
        let auditProvider;
        switch (scmType) {
            case enums_1.ScmType.GitHub: {
                auditProvider = new GitHubContributorAuditProvider_1.default();
                break;
            }
            case enums_1.ScmType.BitbucketCloud: {
                auditProvider = new BitbucketCloudContributorAuditProvider_1.default();
                break;
            }
            default: {
                throw new Error(`Unsupported SCM type: ${scmType}`);
            }
        }
        const hooksApiClient = new SOOSHooksApiClient_1.default(apiKey, apiURL.replace("api.", "api-hooks."));
        return new ContributorAuditService(auditProvider, hooksApiClient);
    }
    async audit(implementationParams) {
        this.validateCommonParams(implementationParams);
        const contributors = await this.auditProvider.audit(implementationParams);
        logging_1.soosLogger.verboseDebug(`Contributing Developers found: ${JSON.stringify(contributors, null, 2)}`);
        return contributors;
    }
    async uploadContributorAudits(clientHash, contributorAudit) {
        logging_1.soosLogger.info(`Uploading Contributor Audit to SOOS.`);
        await this.hooksApiClient.postContributorAudits(clientHash, contributorAudit);
        logging_1.soosLogger.info(`Results uploaded successfully.`);
    }
    async saveResults(results, format) {
        logging_1.soosLogger.info(`Saving results.`);
        switch (format) {
            case enums_1.ScmResultsFormat.JSON: {
                await this.saveResultsAsJSON(results);
                break;
            }
            case enums_1.ScmResultsFormat.TXT: {
                await this.saveResultsAsTXT(results);
                break;
            }
            default: {
                throw new Error(`Unsupported format: ${format}`);
            }
        }
    }
    async saveResultsAsJSON(results) {
        fs_1.default.writeFileSync(Path.join(process.cwd(), `${constants_1.SOOS_CONSTANTS.Files.ContributorAuditResults}.json`), JSON.stringify(results, null, 2));
        logging_1.soosLogger.info(`Results saved successfully ${Path.join(process.cwd(), `${constants_1.SOOS_CONSTANTS.Files.ContributorAuditResults}.json`)}`);
    }
    async saveResultsAsTXT(results) {
        const uniqueContributors = new Set();
        results.contributors
            .sort((a, b) => a.username.localeCompare(b.username))
            .forEach((contributor) => {
            uniqueContributors.add(contributor.username);
        });
        fs_1.default.writeFileSync(Path.join(process.cwd(), `${constants_1.SOOS_CONSTANTS.Files.ContributorAuditResults}.txt`), Array.from(uniqueContributors).join("\n"));
        logging_1.soosLogger.info(`Results saved successfully ${Path.join(process.cwd(), `${constants_1.SOOS_CONSTANTS.Files.ContributorAuditResults}.txt`)}`);
    }
    validateCommonParams(implementationParams) {
        if (!implementationParams["days"]) {
            throw new Error("Days is required");
        }
        if (utilities_1.ParamUtilities.getAsNumber(implementationParams, "days") < 0) {
            throw new Error("Days must be greater than 0");
        }
    }
}
exports.default = ContributorAuditService;
