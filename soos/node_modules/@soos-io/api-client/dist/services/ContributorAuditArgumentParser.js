"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const argparse_1 = require("argparse");
const enums_1 = require("../enums");
const constants_1 = require("./ContributorAuditService/constants");
const ArgumentParserBase_1 = require("./ArgumentParserBase");
const GitHubContributorAuditProvider_1 = tslib_1.__importDefault(require("./ContributorAuditService/providers/GitHub/GitHubContributorAuditProvider"));
const BitbucketCloudContributorAuditProvider_1 = tslib_1.__importDefault(require("./ContributorAuditService/providers/BitbucketCloud/BitbucketCloudContributorAuditProvider"));
class ContributorAuditArgumentParser extends ArgumentParserBase_1.ArgumentParserBase {
    constructor(argumentParser) {
        super(argumentParser);
    }
    static create() {
        const parser = new argparse_1.ArgumentParser({ description: `SOOS SCM Audit` });
        return new ContributorAuditArgumentParser(parser);
    }
    addBaseContributorArguments() {
        this.argumentParser.add_argument("--days", {
            help: "Number of days to look back for commits.",
            default: constants_1.SOOS_CONTRIBUTOR_AUDIT_CONSTANTS.Parameters.DefaultDaysAgo,
            required: false,
            type: Number,
        });
        this.addEnumArgument(this.argumentParser, "--saveResults", enums_1.ScmResultsFormat, {
            help: "Save results to file, options available: JSON, TXT.",
            required: false,
            default: enums_1.ScmResultsFormat.TXT,
        });
        this.addEnumArgument(this.argumentParser, "--scmType", enums_1.ScmType, {
            help: "Scm Type to use for the audit. Options: GitHub, Bitbucket.",
            default: enums_1.ScmType.GitHub,
            required: false,
        });
    }
    parseArguments() {
        this.addCommonArguments();
        this.addBaseContributorArguments();
        const args = this.argumentParser.parse_known_args()[0];
        switch (args.scmType) {
            case enums_1.ScmType.GitHub: {
                return GitHubContributorAuditProvider_1.default.parseArgs(this.argumentParser);
            }
            case enums_1.ScmType.BitbucketCloud: {
                return BitbucketCloudContributorAuditProvider_1.default.parseArgs(this.argumentParser);
            }
            default:
                throw new Error("Invalid scmType");
        }
    }
}
exports.default = ContributorAuditArgumentParser;
