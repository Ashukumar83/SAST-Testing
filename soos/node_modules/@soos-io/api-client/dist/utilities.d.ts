import { IntegrationName, OnFailure, ScanStatus } from "./enums";
declare const isNil: (value: unknown) => value is null | undefined;
declare const ensureValue: <T>(value: T | null | undefined, propertyName: string) => T;
declare const ensureNonEmptyValue: (value: string | null | undefined, propertyName: string) => string;
declare const ensureEnumValue: <T, TEnumObject extends Record<string, T> = Record<string, T>>(enumObject: TEnumObject, inputValue: string | null | undefined, parameterName?: string, excludeDefault?: keyof TEnumObject, ignoreCase?: boolean) => T | undefined;
declare const sleep: (ms: number) => Promise<unknown>;
declare const isUrlAvailable: (url: string) => Promise<boolean>;
declare const obfuscateProperties: <T extends Record<string, unknown> = Record<string, unknown>>(dictionary: T, properties: Array<keyof T>, replacement?: string) => T;
declare const convertStringToBase64: (content: string) => string;
declare const getEnvVariable: (name: string) => string | null;
declare const formatBytes: (bytes: number, decimals?: number) => string;
declare const getAnalysisExitCodeWithMessage: (scanStatus: ScanStatus, integrationName: IntegrationName, onFailure: OnFailure) => {
    exitCode: number;
    message: string;
};
declare const DateUtilities: {
    getDate: (daysAgo?: number) => Date;
    getDateFromUnixUTC: (unixUTC: number) => Date;
    isWithinDateRange(date: Date, minDate: Date): boolean;
};
declare const StringUtilities: {
    pluralizeWord: (count: number | null | undefined, singular: string, plural?: string) => string;
    pluralizeTemplate: (count: number | null, singular: string, plural?: string) => string;
    fromCamelToTitleCase: (str: string) => string;
    areEqual: (a: string, b: string, options?: {
        locales?: Array<string>;
    } & Intl.CollatorOptions) => boolean;
    isEmptyString: (value: string) => boolean;
};
export { isNil, ensureValue, ensureEnumValue, ensureNonEmptyValue, sleep, isUrlAvailable, obfuscateProperties, convertStringToBase64, getEnvVariable, formatBytes, getAnalysisExitCodeWithMessage, DateUtilities, StringUtilities, };
