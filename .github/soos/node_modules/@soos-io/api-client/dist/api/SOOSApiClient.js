"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAxiosError = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const SOOSLogger_1 = require("../logging/SOOSLogger");
const utilities_1 = require("../utilities");
const isAxiosError = (e) => e?.isAxiosError === true;
exports.isAxiosError = isAxiosError;
class SOOSApiClient {
    static createHttpClient({ baseUri, apiKey, apiClientName }) {
        const client = axios_1.default.create({
            baseURL: baseUri,
            headers: {
                "x-soos-apikey": apiKey,
                "Content-Type": "application/json",
            },
            maxBodyLength: 1024 * 5000 * 50,
            maxContentLength: 1024 * 5000 * 50,
        });
        client.interceptors.request.use((request) => {
            if (request.data) {
                SOOSLogger_1.soosLogger.verboseDebug(apiClientName, `Request URL: ${request.method?.toLocaleUpperCase()} ${request.url}`);
                if (request.params) {
                    SOOSLogger_1.soosLogger.verboseDebug(apiClientName, `Request Params: ${JSON.stringify(request.params)}`);
                }
                SOOSLogger_1.soosLogger.verboseDebug(apiClientName, `Request Body: ${JSON.stringify(request.data)}`);
            }
            return request;
        }, (rejectedRequest) => {
            return Promise.reject(rejectedRequest);
        });
        client.interceptors.response.use((response) => {
            SOOSLogger_1.soosLogger.verboseDebug(apiClientName, `Response Body: ${JSON.stringify(response.data)}`);
            return response;
        }, (rejectedResponse) => {
            if (isAxiosError(rejectedResponse)) {
                const isCodedMessageModel = !(0, utilities_1.isNil)(rejectedResponse.response?.data?.code);
                if (!isCodedMessageModel) {
                    switch (rejectedResponse.response?.status) {
                        case 403:
                            throw new Error(`${apiClientName} ${rejectedResponse.request?.method} ${rejectedResponse.config?.url}: Your request may have been blocked. (Forbidden)`);
                        case 503:
                            throw new Error(`${apiClientName} ${rejectedResponse.request?.method} ${rejectedResponse.config?.url}: We are down for maintenance. Please try again in a few minutes. (Service Unavailable)`);
                        default:
                            throw new Error(`${apiClientName} ${rejectedResponse.request?.method} ${rejectedResponse.config?.url}: Unexpected response ${rejectedResponse.response?.status}.`);
                    }
                }
                throw new Error(`${apiClientName} ${rejectedResponse.request?.method?.toLocaleUpperCase()} ${rejectedResponse.config?.url}: ${rejectedResponse.response?.data?.message} (${rejectedResponse.response?.data?.code})`);
            }
            return Promise.reject(rejectedResponse);
        });
        return client;
    }
    static create(params) {
        return this.createHttpClient(params);
    }
}
exports.default = SOOSApiClient;
