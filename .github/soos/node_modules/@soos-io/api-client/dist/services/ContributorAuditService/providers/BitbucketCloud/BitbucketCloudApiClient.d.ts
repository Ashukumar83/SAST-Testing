import { IContributorAuditRepositories } from "../../../../api/SOOSHooksApiClient";
export interface BitbucketRepositoryApiResponse {
    values: BitbucketCloudRepository[];
    next?: string;
}
export interface BitbucketCloudRepository {
    uuid: string;
    full_name: string;
    name: string;
    is_private: boolean;
    updated_on: string;
    workspace: BitbucketCloudWorkspace;
}
export interface BitbucketCloudWorkspace {
    type: string;
    uuid: string;
    name: string;
    slug: string;
}
export interface BitbucketCloudCommitsApiResponse {
    values: BitbucketCloudCommit[];
    next?: string;
}
export interface BitbucketCloudCommit {
    author: BitbucketCloudAuthor;
    date: string;
}
export interface BitbucketCloudAuthor {
    raw: string;
    name: string;
    emailAddress: string;
    displayName: string;
    user: BitbucketCloudUser;
}
interface BitbucketCloudUser {
    display_name: string;
    type: string;
    nickname: string;
}
declare class BitbucketCloudApiClient {
    private readonly client;
    private readonly workspace;
    private readonly days;
    private readonly dateToFilter;
    constructor(days: number, username: string, password: string, workspace: string, baseUri?: string);
    private static createHttpClient;
    getBitbucketCloudRepositories(): Promise<BitbucketCloudRepository[]>;
    getBitbucketCloudRepositoryContributors(repository: BitbucketCloudRepository): Promise<IContributorAuditRepositories[]>;
    private setupInterceptor;
    private static handleRepositoryPagination;
    private handleCommitPagination;
}
export default BitbucketCloudApiClient;
