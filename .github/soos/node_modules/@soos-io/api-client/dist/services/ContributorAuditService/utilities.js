"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataMappingUtilities = exports.ParamUtilities = void 0;
const ParamUtilities = {
    getAsString(params, key) {
        const value = params[key];
        if (typeof value !== "string") {
            throw new Error(`Expected string for parameter '${key}', got ${typeof value}`);
        }
        return value;
    },
    getAsNumber(params, key) {
        const value = params[key];
        if (typeof value !== "number") {
            throw new Error(`Expected number for parameter '${key}', got ${typeof value}`);
        }
        return value;
    },
};
exports.ParamUtilities = ParamUtilities;
const DataMappingUtilities = {
    updateContributors(acc, repo, username, commitDate) {
        const existingContributor = acc.find((contributor) => contributor.username === username);
        if (!existingContributor) {
            acc.push({ username, repositories: [repo] });
        }
        else {
            const existingRepository = existingContributor.repositories.find((r) => r.id === repo.id);
            if (!existingRepository) {
                existingContributor.repositories.push(repo);
            }
            else if (new Date(existingRepository.lastCommit) < new Date(commitDate)) {
                existingRepository.lastCommit = commitDate;
            }
        }
        return acc;
    },
    mergeContributors(contributorsArray) {
        const flattenedContributors = contributorsArray.flat();
        const mergedContributors = new Map();
        flattenedContributors.forEach((contributor) => {
            const existingContributor = mergedContributors.get(contributor.username);
            if (existingContributor) {
                contributor.repositories.forEach((repo) => {
                    if (!existingContributor.repositories.find((r) => r.id === repo.id)) {
                        existingContributor.repositories.push(repo);
                    }
                });
            }
            else {
                mergedContributors.set(contributor.username, contributor);
            }
        });
        return Array.from(mergedContributors.values());
    },
};
exports.DataMappingUtilities = DataMappingUtilities;
