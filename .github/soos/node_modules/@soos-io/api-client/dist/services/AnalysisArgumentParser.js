"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const argparse_1 = require("argparse");
const enums_1 = require("../enums");
const utilities_1 = require("../utilities");
const ArgumentParserBase_1 = require("./ArgumentParserBase");
class AnalysisArgumentParser extends ArgumentParserBase_1.ArgumentParserBase {
    constructor(argumentParser, integrationName, integrationType, scanType, scriptVersion) {
        super(argumentParser);
        this.integrationName = integrationName;
        this.integrationType = integrationType;
        this.scanType = scanType;
        this.scriptVersion = scriptVersion;
    }
    static create(integrationName, integrationType, scanType, scriptVersion) {
        const parser = new argparse_1.ArgumentParser({ description: `SOOS ${scanType}` });
        return new AnalysisArgumentParser(parser, integrationName, integrationType, scanType, scriptVersion);
    }
    addBaseScanArguments() {
        this.argumentParser.add_argument("--appVersion", {
            help: "App Version - Intended for internal use only.",
            required: false,
        });
        this.argumentParser.add_argument("--branchName", {
            help: "The name of the branch from the SCM System.",
            required: false,
        });
        this.argumentParser.add_argument("--branchURI", {
            help: "The URI to the branch from the SCM System.",
            required: false,
        });
        this.argumentParser.add_argument("--buildURI", {
            help: "URI to CI build info.",
            required: false,
        });
        this.argumentParser.add_argument("--buildVersion", {
            help: "Version of application build artifacts.",
            required: false,
        });
        this.argumentParser.add_argument("--commitHash", {
            help: "The commit hash value from the SCM System.",
            required: false,
        });
        this.argumentParser.add_argument("--contributingDeveloperId", {
            help: "Contributing Developer ID - Intended for internal use only.",
            required: false,
        });
        this.addEnumArgument(this.argumentParser, "--contributingDeveloperSource", enums_1.ContributingDeveloperSource, {
            help: "Contributing Developer Source - Intended for internal use only.",
            required: false,
            default: enums_1.ContributingDeveloperSource.Unknown,
        });
        this.argumentParser.add_argument("--contributingDeveloperSourceName", {
            help: "Contributing Developer Source Name - Intended for internal use only.",
            required: false,
        });
        this.addEnumArgument(this.argumentParser, "--onFailure", enums_1.OnFailure, {
            help: "Action to perform when the scan fails. Options: fail_the_build, continue_on_failure.",
            default: enums_1.OnFailure.Continue,
            required: false,
        });
        this.argumentParser.add_argument("--operatingEnvironment", {
            help: "Set Operating environment for information purposes only.",
            required: false,
        });
        this.argumentParser.add_argument("--projectName", {
            help: "Project Name - this is what will be displayed in the SOOS app.",
            required: true,
            type: (value) => {
                return (0, utilities_1.ensureNonEmptyValue)(value, "projectName");
            },
        });
    }
}
exports.default = AnalysisArgumentParser;
