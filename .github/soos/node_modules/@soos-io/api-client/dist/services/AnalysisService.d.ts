import SOOSAnalysisApiClient, { ICreateScanRequestContributingDeveloperAudit, ICreateScanResponse } from "../api/SOOSAnalysisApiClient";
import SOOSProjectsApiClient from "../api/SOOSProjectsApiClient";
import SOOSUserApiClient from "../api/SOOSUserApiClient";
import { IntegrationName, IntegrationType, OutputFormat, PackageManagerType, ScanStatus, ScanType } from "../enums";
import FormData from "form-data";
import SOOSHooksApiClient from "../api/SOOSHooksApiClient";
interface IGenerateFormattedOutputParams {
    clientId: string;
    projectHash: string;
    projectName: string;
    branchHash: string;
    scanType: ScanType;
    analysisId: string;
    outputFormat: OutputFormat;
    workingDirectory: string;
}
interface IManifestFile {
    packageManager: PackageManagerType;
    name: string;
    path: string;
}
interface IStartScanParams {
    clientId: string;
    projectHash: string;
    analysisId: string;
    scanType: ScanType;
    scanUrl: string;
}
interface IWaitForScanToFinishParams {
    scanStatusUrl: string;
    scanUrl: string;
    scanType: ScanType;
    isFirstCheckComplete?: boolean;
}
interface ISetupScanParams {
    clientId: string;
    projectName: string;
    branchName: string | null;
    commitHash: string | null;
    buildVersion: string | null;
    buildUri: string | null;
    branchUri: string | null;
    integrationType: IntegrationType;
    operatingEnvironment: string;
    integrationName: IntegrationName;
    appVersion: string | null;
    scriptVersion: string | null;
    contributingDeveloperAudit?: ICreateScanRequestContributingDeveloperAudit[];
    scanType: ScanType;
    toolName?: string | null;
    toolVersion?: string | null;
}
interface IUpdateScanStatusParams {
    clientId: string;
    projectHash: string;
    branchHash: string;
    scanType: ScanType;
    analysisId: string;
    status: ScanStatus;
    message: string;
    scanStatusUrl?: string;
}
declare const GeneratedScanTypes: ScanType[];
declare class AnalysisService {
    analysisApiClient: SOOSAnalysisApiClient;
    projectsApiClient: SOOSProjectsApiClient;
    userApiClient: SOOSUserApiClient;
    hooksApiClient: SOOSHooksApiClient;
    constructor(analysisApiClient: SOOSAnalysisApiClient, projectsApiClient: SOOSProjectsApiClient, userApiClient: SOOSUserApiClient, hooksApiClient: SOOSHooksApiClient);
    static create(apiKey: string, apiURL: string): AnalysisService;
    private logStatusMessage;
    setupScan({ clientId, projectName, branchName, commitHash, buildVersion, buildUri, branchUri, integrationType, operatingEnvironment, integrationName, appVersion, scriptVersion, contributingDeveloperAudit, scanType, toolName, toolVersion, }: ISetupScanParams): Promise<ICreateScanResponse>;
    startScan({ clientId, projectHash, analysisId, scanType, scanUrl, }: IStartScanParams): Promise<void>;
    waitForScanToFinish({ scanStatusUrl, scanUrl, scanType, isFirstCheckComplete, }: IWaitForScanToFinishParams): Promise<ScanStatus>;
    generateFormattedOutput({ clientId, projectHash, projectName, branchHash, scanType, analysisId, outputFormat, workingDirectory, }: IGenerateFormattedOutputParams): Promise<void>;
    updateScanStatus({ clientId, projectHash, branchHash, scanType, analysisId, status, message, scanStatusUrl, }: IUpdateScanStatusParams): Promise<void>;
    findAnalysisFiles(scanType: ScanType, path: string, pattern: string, filesToExclude?: string[] | null, directoriesToExclude?: string[] | null, maxFiles?: number): Promise<{
        filePaths: string[];
        hasMoreThanMaximumFiles: boolean;
    }>;
    findManifestFiles({ clientId, projectHash, branchHash, scanType, analysisId, scanStatusUrl, filesToExclude, directoriesToExclude, sourceCodePath, packageManagers, }: {
        clientId: string;
        projectHash: string;
        branchHash: string;
        scanType: ScanType;
        analysisId: string;
        scanStatusUrl: string;
        filesToExclude: string[];
        directoriesToExclude: string[];
        sourceCodePath: string;
        packageManagers: string[];
    }): Promise<IManifestFile[]>;
    private searchForManifestFiles;
    getAnalysisFilesAsFormData(analysisFilePaths: string[], workingDirectory: string): Promise<FormData>;
    addManifestFilesToScan({ clientId, projectHash, branchHash, analysisId, scanType, scanStatusUrl, manifestFiles, }: {
        clientId: string;
        projectHash: string;
        branchHash: string;
        analysisId: string;
        scanType: ScanType;
        scanStatusUrl: string;
        manifestFiles: Array<IManifestFile>;
    }): Promise<void>;
    private uploadManifestFiles;
}
export { GeneratedScanTypes };
export default AnalysisService;
